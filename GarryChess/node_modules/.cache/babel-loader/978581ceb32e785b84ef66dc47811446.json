{"ast":null,"code":"import { Chess } from 'chess.js';\n\nconst axios = require('axios');\n\nexport async function getBestMove(rootPos) {\n  let rootFenCleaned = rootPos.split(' ').slice(0, 3).join(' ');\n  let response = await axios.get('https://lichess.org/api/cloud-eval', {\n    params: {\n      fen: rootFenCleaned\n    }\n  });\n  let result = response.data.pvs[0].moves.split(\" \")[0];\n  console.log(result);\n  return cleanBestMove(rootPos, result);\n}\nexport async function getELOspecificMoves(rootPos, elo) {\n  let rootFenCleaned = rootPos.split(' ').slice(0, 3).join(' ');\n  let response = await axios.get('https://explorer.lichess.ovh/lichess', {\n    params: {\n      fen: rootFenCleaned,\n      speed: 'blitz',\n      moves: 3,\n      ratings: [elo - 100, elo]\n    }\n  });\n  let numMoves = response.data.moves.length;\n  let result = [response.data.moves[0].uci];\n  if (numMoves > 1) result.push(response.data.moves[1].uci);\n  if (numMoves > 2) result.push(response.data.moves[2].uci);\n  return result.map(move => cleanBestMove(rootPos, move));\n}\nexport async function generatePositions(rootPos, color, eloLevel) {\n  let game = new Chess(rootPos);\n  let allPositions = [];\n  let positions = [rootPos];\n  let newPositions = [];\n\n  if (game.turn() === color) {\n    allPositions.push(rootPos);\n  }\n\n  for (let i = 0; i < 5; i++) {\n    for (let position of positions) {\n      game.load(position);\n\n      if (game.turn() === color) {\n        game.load(position);\n        let move = await getBestMove(position);\n        game.move({\n          from: move.slice(0, 2),\n          to: move.slice(2, 4)\n        });\n        newPositions.push(game.fen());\n      } else {\n        let moves = await getELOspecificMoves(position, eloLevel);\n\n        for (let move of moves) {\n          game.load(position);\n          game.move({\n            from: move.slice(0, 2),\n            to: move.slice(2, 4)\n          });\n          newPositions.push(game.fen());\n          allPositions.push(game.fen());\n        }\n      }\n    }\n\n    positions = newPositions;\n    newPositions = [];\n  }\n\n  return allPositions;\n} // move is assumed to be valid\n\nfunction cleanBestMove(fen, move) {\n  let game = new Chess(fen);\n\n  if (move.slice(0, 2) === 'e1' && game.get('e1').type === 'k' && game.get('e1').color === 'w' && move.slice(2, 4) === 'h1') {\n    return 'e1g1';\n  } else if (move.slice(0, 2) === 'e1' && game.get('e1').type === 'k' && game.get('e1').color === 'w' && move.slice(2, 4) === 'a1') {\n    return 'e1c1';\n  } else if (move.slice(0, 2) === 'e8' && game.get('e8').type === 'k' && game.get('e8').color === 'b' && move.slice(2, 4) === 'h8') {\n    return 'e8g8';\n  } else if (move.slice(0, 2) === 'e8' && game.get('e8').type === 'k' && game.get('e1').color === 'b' && move.slice(2, 4) === 'a8') {\n    return 'e8c8';\n  }\n\n  return move;\n}","map":{"version":3,"names":["Chess","axios","require","getBestMove","rootPos","rootFenCleaned","split","slice","join","response","get","params","fen","result","data","pvs","moves","console","log","cleanBestMove","getELOspecificMoves","elo","speed","ratings","numMoves","length","uci","push","map","move","generatePositions","color","eloLevel","game","allPositions","positions","newPositions","turn","i","position","load","from","to","type"],"sources":["/Users/kianeghbalnia/Desktop/garry-chess/GarryChess/src/ImportantFunctions.js"],"sourcesContent":["import { Chess } from 'chess.js';\n\nconst axios = require('axios');\n\nexport async function getBestMove(rootPos) {\n    let rootFenCleaned = rootPos.split(' ').slice(0,3).join(' ');\n    let response = await axios.get('https://lichess.org/api/cloud-eval', {\n        params: {\n          fen: rootFenCleaned\n        }\n      });\n    let result = response.data.pvs[0].moves.split(\" \")[0];\n    console.log(result);\n    return cleanBestMove(rootPos, result);\n}\n\nexport async function getELOspecificMoves(rootPos, elo){\n    let rootFenCleaned = rootPos.split(' ').slice(0,3).join(' ');\n    let response = await axios.get('https://explorer.lichess.ovh/lichess', {\n        params: {\n          fen: rootFenCleaned,\n          speed: 'blitz',\n          moves: 3,\n          ratings: [elo-100, elo],\n        }\n      });\n    let numMoves = response.data.moves.length;\n    let result = [response.data.moves[0].uci];\n    if (numMoves > 1)\n      result.push(response.data.moves[1].uci);\n    if (numMoves > 2)\n      result.push(response.data.moves[2].uci);\n    return result.map((move)=>cleanBestMove(rootPos,move));\n}\n\nexport async function generatePositions(rootPos, color, eloLevel) {\n    let game = new Chess(rootPos);\n    let allPositions = [];\n\n    let positions = [rootPos];\n    let newPositions = [];\n\n    if (game.turn() === color){\n      allPositions.push(rootPos);\n    }\n    for (let i = 0; i<5; i++)\n    {\n      for (let position of positions)\n      {\n        game.load(position);\n        \n        if (game.turn() === color){\n          game.load(position);\n          let move = await getBestMove(position);\n          game.move({ from: move.slice(0,2), to: move.slice(2,4) });\n          newPositions.push(game.fen());\n        }else {\n          let moves = await getELOspecificMoves(position, eloLevel);\n          for (let move of moves)\n          {\n            game.load(position);\n            game.move({ from: move.slice(0,2), to: move.slice(2,4) });\n            newPositions.push(game.fen());\n            allPositions.push(game.fen());\n          }\n        }\n      }\n      positions = newPositions;\n      newPositions = [];\n    }\n    return allPositions;\n}\n\n// move is assumed to be valid\nfunction cleanBestMove(fen, move){\n  let game = new Chess(fen);\n  if (move.slice(0,2) === 'e1' && game.get('e1').type === 'k' && game.get('e1').color === 'w' && move.slice(2,4) === 'h1'){\n    return 'e1g1'\n  }\n  else if (move.slice(0,2) === 'e1' && game.get('e1').type === 'k' && game.get('e1').color === 'w' && move.slice(2,4) === 'a1'){\n    return 'e1c1'\n  }\n  else if (move.slice(0,2) === 'e8' && game.get('e8').type === 'k' && game.get('e8').color === 'b' && move.slice(2,4) === 'h8'){\n    return 'e8g8'\n  }\n  else if (move.slice(0,2) === 'e8' && game.get('e8').type === 'k' && game.get('e1').color === 'b' && move.slice(2,4) === 'a8'){\n    return 'e8c8'\n  }\n  return move;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}