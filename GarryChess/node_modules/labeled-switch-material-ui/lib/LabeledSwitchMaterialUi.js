"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ios_switch_material_ui_1 = require("ios-switch-material-ui");
var Label_1 = require("./Label");
var Layout_1 = require("./Layout");
var styles = {
    center: {
        color: '#e2e2e2'
    },
    left: {
        color: '#eeeeee'
    },
    right: {
        color: '#5269d8'
    }
};
var LabeledSwitchMaterialUi = (function (_super) {
    __extends(LabeledSwitchMaterialUi, _super);
    function LabeledSwitchMaterialUi(props) {
        var _this = _super.call(this, props) || this;
        _this.handleSelectLeft = function () { return _this.setKnobOnLeft(true); };
        _this.handleSelectRight = function () { return _this.setKnobOnLeft(false); };
        _this.handleSwitchKnob = function () { return _this.setKnobOnLeft(!_this.state.knobOnLeft); };
        _this.state = {
            knobOnLeft: props.knobOnLeft || props.defaultKnobOnLeft || false
        };
        return _this;
    }
    LabeledSwitchMaterialUi.prototype.render = function () {
        var _a = this.props, disabled = _a.disabled, knobSize = _a.knobSize, labelLeft = _a.labelLeft, labelRight = _a.labelRight, style = _a.style, styleLabelLeft = _a.styleLabelLeft, styleLabelRight = _a.styleLabelRight, styleSwitch = _a.styleSwitch, aspectRatioSwitch = _a.aspectRatioSwitch;
        var knobOnLeft = this.state.knobOnLeft;
        var disabledLeft = knobOnLeft !== true;
        var disabledRight = knobOnLeft === true;
        var styleLeft = this.getStyleLabel(styles.left, styleLabelLeft);
        var styleRight = this.getStyleLabel(styles.right, styleLabelRight);
        var styleOfToggle = this.getStyleLabel(styles.center, styleSwitch);
        var colorKnobOnLeft = styleLeft.color;
        var colorKnobOnRight = styleRight.color;
        var colorSwitch = styleOfToggle.color;
        return (React.createElement(Layout_1.default, { center: React.createElement(ios_switch_material_ui_1.default, { aspectRatio: aspectRatioSwitch, colorKnobOnLeft: colorKnobOnLeft, colorKnobOnRight: colorKnobOnRight, colorSwitch: colorSwitch, disabled: disabled, knobSize: knobSize, knobOnLeft: knobOnLeft, onChange: this.handleSwitchKnob }), left: React.createElement(Label_1.default, { disabled: disabledLeft, label: labelLeft, onClick: this.handleSelectLeft, style: styleLeft }), right: React.createElement(Label_1.default, { disabled: disabledRight, label: labelRight, onClick: this.handleSelectRight, style: styleRight }), style: style }));
    };
    LabeledSwitchMaterialUi.prototype.getStyleLabel = function (defaultStyle, style) {
        if (style === undefined) {
            return defaultStyle;
        }
        return __assign(__assign({}, defaultStyle), style);
    };
    LabeledSwitchMaterialUi.prototype.setKnobOnLeft = function (knobOnLeft) {
        var _a = this.props, disabled = _a.disabled, onChange = _a.onChange;
        if (disabled) {
            return;
        }
        var newKnobOnLeft = !this.state.knobOnLeft;
        if (this.props.knobOnLeft === undefined) {
            this.setState({
                knobOnLeft: newKnobOnLeft
            });
        }
        onChange && onChange(newKnobOnLeft);
    };
    return LabeledSwitchMaterialUi;
}(React.PureComponent));
exports.default = LabeledSwitchMaterialUi;
//# sourceMappingURL=LabeledSwitchMaterialUi.js.map